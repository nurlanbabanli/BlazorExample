@page "/category"
@using BlazorServerApp.Models.Category
@using Business.Abstract

@inject ICategoryService _categoryService;
@inject IJSRuntime _jsRuntime;

<_DeleteConfirmation DeleteProcessing=@isDeleteProcessing OnConfirm=@HandleDeleteConfirm></_DeleteConfirmation>
<div>
    <div class="row text-end">
        <div class="col-12">
            <a href="category/edit" class="btn btn-primary" style="width:200px">Add New Category</a>
        </div>
    </div>
    <div class="row">
        <div class="col-5"></div>
        <div class="col-5">
            <h2>Category List</h2>
        </div>
    </div>
    @if (CategoryUIDtos.Any())
    {
        <div class="row pt-0">
            <table class="table thead-dark table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th scope="col" class="text-center">#</th>
                        <th scope="col" class="text-center">Name</th>
                        <th scope="col" class="text-center">Create Date</th>
                        <th scope="col" class="text-center" style="width:20%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        categoryOrderNo=0;
                    }
                    @foreach (var category in CategoryUIDtos)
                    {
                        categoryOrderNo++;

                        <tr>
                            <th scope="row">@categoryOrderNo</th>
                            <th scope="row">@category.Name</th>
                            <th scope="row">@category.CreatedDate</th>
                            <th class="row p-0 m-0">
                                <div class="col-6 min-vw-50">
                                    <NavLink href=@{
                                     $"/category/edit/{category.Id}"
                                     } class="btn btn-primary w-100" style="min-width:60px">Edit</NavLink>
                                </div>
                                <div class="col-6">
                                    <button class="btn btn-danger w-100" style="min-width:70px" @onclick="()=>HandleDelete(category.Id)">Delete</button>
                                </div>
                            </th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        if (isLoading)
        {
            <div class="row text-center" style="padding-top: 100px">
                <div class="col-3"></div>
                <h1 class="col-4">Loading...</h1>
            </div>
            <div class="row" style="padding-top: 200px">
                <div class="col-4"></div>
                <div class="col-4">
                    <div class="sk-swing" style="width:200px; height:200px;">
                        <div class="sk-swing-dot" style="background-color:darkblue"></div>
                        <div class="sk-swing-dot" style="background-color:darkblue"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row" style="padding-top: 300px">
                <div class="col-12">
                    <h2 class="text-center">No Data</h2>
                </div>
            </div>
        }
    }

</div>



@code {
    private List<CategoryUIDto> CategoryUIDtos = new List<CategoryUIDto>();
    private int categoryOrderNo = 0;
    private bool isLoading = true;
    private int categoryToDeleteId = 0;
    private CategoryUIDto categoryUIDtoToDelete;
    private bool isDeleteProcessing = false;

    private async Task HandleDelete(int id)
    {
        categoryToDeleteId=id;
        categoryUIDtoToDelete=CategoryUIDtos.FirstOrDefault(c => c.Id==id);
        await _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmation");
    }

    private async Task HandleDeleteConfirm(bool isDeleteConfirmed)
    {
        isDeleteProcessing=true;       
        if (isDeleteConfirmed && categoryToDeleteId!=0)
        {
            await DeleteCategory();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmation");
        }
        isDeleteProcessing=false;
        
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadCategories);
    }


    private async Task DeleteCategory()
    {
        var deleteResult = await _categoryService.DeleteAsync(categoryToDeleteId);
        if (deleteResult==null)
        {
            await _jsRuntime.InvokeVoidAsync("ShowToastrError", "Delete category error");
        }
        else if (!deleteResult.IsSuccess)
        {
            await _jsRuntime.InvokeVoidAsync("ShowToastrError", deleteResult.Message);
        }
        else
        {
            if (categoryUIDtoToDelete!=null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowToastrSuccess", "Category deleted"+"<br>"+"Category Name: "+categoryUIDtoToDelete.Name);
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("ShowToastrSuccess", "Category deleted");
            }
        }

        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        CategoryUIDtos.Clear();
        isLoading=true;
        //StateHasChanged();

        var dataResultCategoryDto = await _categoryService.GetAllAsync();
        if (dataResultCategoryDto==null)
        {
            await _jsRuntime.InvokeVoidAsync("ShowToastrError", "Get category error");
        }
        else if (!dataResultCategoryDto.IsSuccess)
        {
            await _jsRuntime.InvokeVoidAsync("ShowToastrError", dataResultCategoryDto.Message);
        }

        var tempCategoryDtos = dataResultCategoryDto.Data.OrderByDescending(x => x.CreatedDate).ToList();

        foreach (var category in tempCategoryDtos)
        {
            CategoryUIDtos.Add(
                new CategoryUIDto
                    {
                        Id=category.Id,
                        Name=category.Name,
                        CreatedDate=category.CreatedDate
                    });
        }

        //await Task.Run(LoadCategoriesAsync);
        isLoading=false;
    }



    //private async Task LoadCategoriesAsync()
    //{
    //    var dataResultCategoryDto = await _categoryService.GetAllAsync();
    //    if (dataResultCategoryDto==null)
    //    {
    //        await _jsRuntime.InvokeVoidAsync("ShowToastrError", "Get category error");
    //    }
    //    else if (!dataResultCategoryDto.IsSuccess)
    //    {
    //        await _jsRuntime.InvokeVoidAsync("ShowToastrError", dataResultCategoryDto.Message);
    //    }

    //    var tempCategoryDtos = dataResultCategoryDto.Data.OrderByDescending(x => x.CreatedDate).ToList();

    //    foreach (var category in tempCategoryDtos)
    //    {
    //        CategoryUIDtos.Add(
    //            new CategoryUIDto
    //                {
    //                    Id=category.Id,
    //                    Name=category.Name,
    //                    CreatedDate=category.CreatedDate
    //                });
    //    }
    //}
}
